@using Bonobo.Git.Server.Extensions
@using System.Linq;
@using System.Collections;
@using System.Collections.Concurrent;

@model RepositoryCommitsModel
@{
    Layout = "~/Views/Repository/_RepositoryLayout.cshtml";
    ViewBag.Title = Resources.Repository_Commits_Title;
    List<string> addedNodes = new List<string>();
    //var rnd = new Random();
    int x = 1;
    int y = 1;
    ConcurrentDictionary<string, Pair> coords = new ConcurrentDictionary<string, Pair>();

    Func<string, Pair> GetCoords = (commitId) => coords.GetOrAdd(commitId, p =>
    {
        return new Pair();
    });
}

@if (Model != null)
{
    <style type="text/css">
        #container {
            max-width: 400px;
            height: 400px;
            margin: auto;
        }
    </style>

    <canvas id="gitGraph"></canvas>

    @section scripts{
        <script type="text/javascript" src="~/Scripts/gitgraph.js"></script>

        <div id="canvas" style="width:100%"></div>

        <script type="text/javascript">
            var myTemplateConfig = {
                colors: [ "#F00", "#0F0", "#00F" ], // branches colors, 1 per column
                branch: {
                    lineWidth: 8,
                    spacingX: 50
                },
                commit: {
                    spacingY: -80,
                    dot: {
                        size: 12
                    },
                    message: {
                        displayAuthor: true,
                        displayHash: false,
                        font: "normal 12pt Arial"
                    }
                }
            };

            var myTemplate = new GitGraphTemplate( myTemplateConfig );

            var config = {
                template: "metro"       // could be: "blackarrow" or "metro" or myTemplate (custom Template object)
                //, mode: "compact"     // special compact mode : hide messages & compact graph
            };

            var gitGraph = new GitGraph(config);

            var branches = {};

            //var master = gitGraph.branch( "master" );

            @foreach (var commit in Model.Commits.Select(p => new {
                ID = p.ID.Substring(0, 7),
                Message = p.Message.Replace("\r\n", "\\\\n").Replace("\n", "\\\\n"),
                BID = p.Parents.First().Substring(0, 7)
            }).Take(100))
            {
                @: var branchName = '@commit.BID.Substring(0, 7)';

                @: if (!branches[branchName]){
                @:      branches[branchName] = gitGraph.branch( branchName );
                @: }

                @: branches[branchName].commit('@commit.Message');

                //@:commits['@commit.ID'] = 1;

                //x++;

                @*foreach (var parent in commit.Parents)
                {
                    if (!addedNodes.Contains(commit.ID)){
                        addedNodes.Add(commit.ID);
                        @:nodes.push({ id: '@commit.ID', label: '@commit.Message',   x: @(x), y: @(y++), "size": 1 });
                        }

                    @:edges.push({ id: 'e' + '@commit.ID _ @parent', source: '@commit.ID', target: '@parent.Substring(0, 7)' });
                }*@
            }

            gitGraph.canvas.addEventListener("commit:mouseover", function (event) {
                console.log("You're over a commit.", "Here is a bunch of data ->", event.data);
            });

        </script>
    }
}
@using Bonobo.Git.Server.Extensions
@model RepositoryCommitsModel
@{
    Layout = "~/Views/Repository/_RepositoryLayout.cshtml";
    ViewBag.Title = Resources.Repository_Commits_Title;
    List<string> addedNodes = new List<string>();
    var rnd = new Random();
}

@if (Model != null)
{
    <style type="text/css">
        #container {
            max-width: 400px;
            height: 400px;
            margin: auto;
        }
    </style>

    <div id="container"></div>

    @section scripts{
        <script type="text/javascript" src="~/Scripts/sigma.min.js"></script>
        <script type="text/javascript" src="~/Scripts/plugins/sigma.parsers.json.min.js"></script>

        <div id="canvas" style="width:100%"></div>

        <script type="text/javascript">
    var nodes = [],
        edges = [],
        commits = {};

    @foreach (var commit in Model.Commits.Select(p => new {
                ID = p.ID.Substring(0, 7),
                Message = p.Message.Replace("\r\n", "\\\\n").Replace("\n", "\\\\n"),
                p.Parents
            }).Take(10))
            {
                @:commits['@commit.ID'] = 1;

                foreach (var parent in commit.Parents)
                {
                    if (!addedNodes.Contains(commit.ID)){
                        addedNodes.Add(commit.ID);
                        @:nodes.push({ id: '@commit.ID', label: '@commit.Message',   x: @(rnd.Next(10)), y: @(rnd.Next(10)), "size": 1 });
                        }

                    @:edges.push({ id: 'e' + '@commit.ID _ @parent', source: '@commit.ID', target: '@parent.Substring(0, 7)' });
                }
            }

            for (var i = 0; i < edges.length; i++) {
                var edge = edges[i];

                if (!commits[edge.target]) {
                    nodes.push({ id: edge.target, label: 'more', x: 1, y:1, size: 1 });
                    commits[edge.target] = 1;
                }
            }

            console.log({ nodes: nodes, edges: edges });

            new sigma({
                graph: { nodes: nodes, edges: edges },
                width: '800px',
                container: 'container',
                settings: {
                    defaultNodeColor: '#ec5148'
                }
            });
        </script>



        @*<script type="text/javascript" src="~/Scripts/raphael-min.js"></script>
            <script type="text/javascript" src="~/Scripts/dracula_graffle.js"></script>
            <script type="text/javascript" src="~/Scripts/dracula_graph.js"></script>

            <div id="canvas"></div>

            <script type="text/javascript">
                var render = function(){
                    console.log(arguments);
                };

                var g = new Graph();

                @foreach (var commit in Model.Commits)
                {
                    foreach (var parent in commit.Parents)
                    {
                        @:g.addEdge('@parent.Substring(0, 7)', '@commit.ID.Substring(0, 7)', { label: '@commit.Message.Replace("\r\n", "\\\\n").Replace("\n", "\\\\n")', render: render });
                    }
                }

                var layouter = new Graph.Layout.Spring(g);
                layouter.layout();

                var renderer = new Graph.Renderer.Raphael('canvas', g, 1000, 700);
                renderer.draw();
            </script>*@
    }
}